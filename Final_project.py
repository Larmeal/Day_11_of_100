# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏° blackjack

import random
from random import shuffle
from art import logo

# ‡∏™‡∏£‡πâ‡∏≤‡∏á while ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ
again = True
while again:
    play = input("Do you want to play a game of Blackjake? Type 'yes' or 'no': ").lower()
    if play == "no":
        print("Good bye")
        again = False
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
    elif play == "yes":
        print(logo)

        cards = {
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 4,
            "5": 5,
            "6": 6,
            "7": 7,
            "8": 8,
            "9": 9,
            "10": 10,
            "J": 10,
            "Q": 10,
            "K": 10,
        }

        deck_cards = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
        # ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2 ‡πÑ‡∏û‡πà ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ shuffle deck_cards 
        random_card = random.shuffle(deck_cards)
        card_player_1 = deck_cards[0]
        card_player_2 = deck_cards[1]
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏∞‡πÑ‡∏£
        player_card = [card_player_1, card_player_2]
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô integer ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥ ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö key ‡πÉ‡∏ô dict ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏£‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        player_card_result = [cards[card_player_1], cards[card_player_2]]

        # ‡∏ó‡∏≥ deck ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞ make sure ‡∏ß‡πà‡∏≤‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà bot ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ô‡πà ‡πÜ
        new_deck_cards = []
        for new in deck_cards:
            # ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ check ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏û‡πà‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å list
            if new == player_card[0] and new != player_card[1]:
                new_deck_cards = []
            elif new != player_card[0] and new == player_card[1]:
                new_deck_cards = [] 
            else:
                new_deck_cards.append(new)

        # random ‡πÑ‡∏û‡πà‡πÉ‡∏´‡πâ bot 2 ‡πÉ‡∏ö ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        random_new_deck_cards = random.shuffle(new_deck_cards)
        card_computer_1 = new_deck_cards[0]
        card_computer_2 = new_deck_cards[1]
        # ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏û‡πà ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π‡∏ß‡πà‡∏≤ bot ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ö‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
        show_computer_card = card_computer_1
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bot ‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏á
        computer_card = [card_computer_1, card_computer_2]
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å str() --> int()
        computer_card_result = [cards[card_computer_1], cards[card_computer_2]]

        # ‡∏ó‡∏≥ deck ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 1 ‡πÉ‡∏ö ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á bot
        new_deck_cards_2 = []
        for new in new_deck_cards:
            if new == computer_card[0] and new != computer_card[1]:
                new_deck_cards_2 = []
            elif new != computer_card[0] and new == computer_card[1]:
                new_deck_cards_2 = [] 
            else:
                new_deck_cards_2.append(new)
        
        # random ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á deck ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î
        random_new_deck_cards_2 = random.shuffle(new_deck_cards_2)
        # ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡πà‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 1 ‡πÉ‡∏ö ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πå‡∏î 2 ‡πÉ‡∏ö‡πÅ‡∏£‡∏Å‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 1 ‡πÉ‡∏ö ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô deck ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        player_card_result = [cards[card_player_1], cards[card_player_2], cards[new_deck_cards_2[0]]]

        # function ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞ ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏±‡πà‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°
        def result():
            result_player = player_card_result[0] + player_card_result[1]
            # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1 ‡∏´‡∏£‡∏∑‡∏≠ ace ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡πà‡∏≤ ‡∏Ñ‡∏∑‡∏≠ 1 ‡πÅ‡∏•‡∏∞ 11 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡∏ó‡∏µ‡πà‡∏ö‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≤ < 22 ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ = 11
            if result_player < 22:
                cards["1"] = 11
                result_player = player_card_result[0] + player_card_result[1]
            else:
                cards["1"] = 1
                result_player = player_card_result[0] + player_card_result[1]
            
            result_computer = computer_card_result[0] + computer_card_result[1]
            if result_computer < 22:
                cards["1"] = 11
                result_computer = computer_card_result[0] + computer_card_result[1]
            else:
                cards["1"] = 1
                result_computer = computer_card_result[0] + computer_card_result[1]
            
            if result_player == result_computer:
                print("You draw")
            elif result_player > result_computer and result_player <= 21:
                print("You win")
            elif result_player < result_computer or result_player > 21:
                print("You lose")

        # function ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞ ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°
        def result_2():
            result_player = player_card_result[0] + player_card_result[1] + player_card_result[2]
            # ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô 2 ‡πÉ‡∏ö‡∏Å‡πá‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î 3 ‡πÉ‡∏ö ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡∏ó‡∏µ‡∏Ñ‡πà‡∏≤ = 11 ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 21 ‡πÄ‡∏™‡∏°‡∏≠ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡∏à‡∏∞ = 11 ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÅ‡∏û‡πâ‡πÄ‡∏™‡∏°‡∏≠
            result_computer = computer_card_result[0] + computer_card_result[1]
            if result_computer < 22:
                cards["1"] = 11
                result_computer = computer_card_result[0] + computer_card_result[1]
            else:
                cards["1"] = 1
                result_computer = computer_card_result[0] + computer_card_result[1]
                
            if result_player == result_computer:
                print("You draw")
            elif result_player > result_computer and result_player <= 21:
                print("You win")
            elif result_player < result_computer or result_player > 21:
                print("You lose")

        print(f"Your cards: {player_card}")
        print(f"Computer's first card: {show_computer_card}")
        draw_cards = input("Type 'yes' to get another card, type 'no' to pass: ").lower()
        if draw_cards == "yes":
            player_card = [card_player_1, card_player_2, new_deck_cards_2[0]]
            print(f"Your cards: {player_card}")
            print(f"Computer's card: {computer_card}")
            result_2()
        else:
            print(f"Your cards: {player_card}")
            print(f"Computer's card: {computer_card}")
            result()

    else:
        print("You should 'yes' or 'no'")


# my teacher version
############### Blackjack Project #####################

#Difficulty Normal üòé: Use all Hints below to complete the project.
#Difficulty Hard ü§î: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard üò≠: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ü§Ø: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.
# import random

# def deal_card():
#   """Returns a random card from the deck."""
#   cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
#   card = random.choice(cards)
#   return card

# #Hint 6: Create a function called calculate_score() that takes a List of cards as input 
# #and returns the score. 
# #Look up the sum() function to help you do this.
# def calculate_score(cards):
#   """Take a list of cards and return the score calculated from the cards"""

#   #Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.
#   if sum(cards) == 21 and len(cards) == 2:
#     return 0
#   #Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().
#   if 11 in cards and sum(cards) > 21:
#     cards.remove(11)
#     cards.append(1)
#   return sum(cards)

# #Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins.
# def compare(user_score, computer_score):
#   #Bug fix. If you and the computer are both over, you lose.
#   if user_score > 21 and computer_score > 21:
#     return "You went over. You lose üò§"


#   if user_score == computer_score:
#     return "Draw üôÉ"
#   elif computer_score == 0:
#     return "Lose, opponent has Blackjack üò±"
#   elif user_score == 0:
#     return "Win with a Blackjack üòé"
#   elif user_score > 21:
#     return "You went over. You lose üò≠"
#   elif computer_score > 21:
#     return "Opponent went over. You win üòÅ"
#   elif user_score > computer_score:
#     return "You win üòÉ"
#   else:
#     return "You lose üò§"

# def play_game():

#   #Hint 5: Deal the user and computer 2 cards each using deal_card()
#   user_cards = []
#   computer_cards = []
#   is_game_over = False

#   for _ in range(2):
#     user_cards.append(deal_card())
#     computer_cards.append(deal_card())

#   #Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.

#   while not is_game_over:
#     #Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends.
#     user_score = calculate_score(user_cards)
#     computer_score = calculate_score(computer_cards)
#     print(f"   Your cards: {user_cards}, current score: {user_score}")
#     print(f"   Computer's first card: {computer_cards[0]}")

#     if user_score == 0 or computer_score == 0 or user_score > 21:
#       is_game_over = True
#     else:
#       #Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended.
#       user_should_deal = input("Type 'y' to get another card, type 'n' to pass: ")
#       if user_should_deal == "y":
#         user_cards.append(deal_card())
#       else:
#         is_game_over = True

#   #Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.
#   while computer_score != 0 and computer_score < 17:
#     computer_cards.append(deal_card())
#     computer_score = calculate_score(computer_cards)

#   print(f"   Your final hand: {user_cards}, final score: {user_score}")
#   print(f"   Computer's final hand: {computer_cards}, final score: {computer_score}")
#   print(compare(user_score, computer_score))

# #Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.
# while input("Do you want to play a game of Blackjack? Type 'y' or 'n': ") == "y":
#   play_game()

